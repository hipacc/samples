cmake_minimum_required(VERSION 3.14)

project(HipaccSamples)

include(CheckLanguage)

find_package(Hipacc HINTS "${CMAKE_CURRENT_LIST_DIR}/../cmake")

enable_testing()

set_property(GLOBAL PROPERTY USE_FOLDERS ON)

set(HIPPAC_SAMPLES_DIR ${CMAKE_CURRENT_LIST_DIR})

macro(add_hipacc_sample_cpu)
   
    message(STATUS "Add sample ${SAMPLE_CATEGORY}/${PROJECT_NAME}_Cpu")

    add_executable(${PROJECT_NAME}_Cpu)
    
    add_hipacc_sources(TARGET ${PROJECT_NAME}_Cpu PRIVATE
                       TARGET_ARCH CPU 
                       SOURCES ${CMAKE_CURRENT_LIST_DIR}/src/main.cpp
                       INCLUDE_DIRS ${HIPPAC_SAMPLES_DIR}/common)
       
    add_test(NAME ${PROJECT_NAME}_Cpu
             COMMAND $<TARGET_FILE:${PROJECT_NAME}_Cpu>
             WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR})
             
    set_target_properties (${PROJECT_NAME}_Cpu PROPERTIES FOLDER ${SAMPLE_CATEGORY})
                   
    if(HIPACC_SAMPLE_USE_OPENCV)
        target_compile_options(${PROJECT_NAME}_Cpu PRIVATE -DUSE_OPENCV)
        target_link_directories(${PROJECT_NAME}_Cpu PRIVATE ${OpenCV_INCLUDE_DIRS})
        target_link_libraries(${PROJECT_NAME}_Cpu ${OpenCV_LIBS})
    endif()
    
endmacro()

macro(add_hipacc_sample_cuda)

    check_language(CUDA)

    if(CMAKE_CUDA_COMPILER)

        message(STATUS "Add sample ${SAMPLE_CATEGORY}/${PROJECT_NAME}_Cuda")
           
        add_executable(${PROJECT_NAME}_Cuda)
                            
        add_hipacc_sources(TARGET ${PROJECT_NAME}_Cuda PRIVATE
                           TARGET_ARCH CUDA 
                           SOURCES ${CMAKE_CURRENT_LIST_DIR}/src/main.cpp
                           INCLUDE_DIRS ${HIPPAC_SAMPLES_DIR}/common)                            
                            
        add_test(NAME ${PROJECT_NAME}_Cuda
                 COMMAND $<TARGET_FILE:${PROJECT_NAME}_Cuda>                       
                 WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR})

        set_target_properties(${PROJECT_NAME}_Cuda PROPERTIES FOLDER ${SAMPLE_CATEGORY})
                              
        target_compile_features(${PROJECT_NAME}_Cuda PUBLIC cxx_std_11)   
                                    
        get_filename_component(CUDA_LIB_DIR "${CUDA_LIBRARIES}" DIRECTORY)
        target_link_directories(${PROJECT_NAME}_Cuda PRIVATE ${CUDA_LIB_DIR})
        target_link_libraries(${PROJECT_NAME}_Cuda cuda cudart nvrtc)
        
        if(HIPACC_SAMPLE_USE_OPENCV)
            target_compile_options(${PROJECT_NAME}_Cuda PRIVATE -DUSE_OPENCV)
            target_link_directories(${PROJECT_NAME}_Cuda PRIVATE ${OpenCV_INCLUDE_DIRS})
            target_link_libraries(${PROJECT_NAME}_Cuda ${OpenCV_LIBS})
        endif()
        
    else()
        message(STATUS "Skip sample ${SAMPLE_CATEGORY}/${PROJECT_NAME}_Cuda (CUDA missing)")
    endif()
    
endmacro()

macro(add_all_subdirectories)
    file(GLOB _SUB_DIRS RELATIVE "${CMAKE_CURRENT_LIST_DIR}" "${CMAKE_CURRENT_LIST_DIR}/*")
    foreach(_SUB_DIR ${_SUB_DIRS})
        if(IS_DIRECTORY "${CMAKE_CURRENT_LIST_DIR}/${_SUB_DIR}" AND EXISTS "${CMAKE_CURRENT_LIST_DIR}/${_SUB_DIR}/CMakeLists.txt")
            add_subdirectory(${_SUB_DIR})
        endif()
    endforeach()
endmacro()

add_all_subdirectories()


