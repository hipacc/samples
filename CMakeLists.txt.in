cmake_minimum_required(VERSION 3.14)

project(HipaccSamples)

include(CheckLanguage)

find_package(Hipacc HINTS "${CMAKE_CURRENT_LIST_DIR}/../cmake")
find_package(OpenCV QUIET)

enable_testing()

set_property(GLOBAL PROPERTY USE_FOLDERS ON)

set(HIPACC_SAMPLES_DIR ${CMAKE_CURRENT_LIST_DIR})

if(OpenCV_FOUND)
    option(HIPACC_SAMPLE_USE_OPENCV "Use OpenCV library to display result images of samples" ON)
endif()

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

macro(add_hipacc_sample_dsl)

    set(options HIDE)
    set(oneValueArgs)
    set(multiValueArgs)

    cmake_parse_arguments(ARG
                        "${options}"
                        "${oneValueArgs}"
                        "${multiValueArgs}"
                        ${ARGN})

    get_filename_component(SAMPLE_NAME "${CMAKE_CURRENT_LIST_DIR}" NAME)

    project(${SAMPLE_NAME}_DSL)
   
    if(${ARG_HIDE})
        set(_MSG_ADDITION "(hidden)")
    else()
        unset(_MSG_ADDITION)
    endif()

    message(STATUS "Add sample ${SAMPLE_CATEGORY}/${PROJECT_NAME} ${_MSG_ADDITION}")

    add_executable(${PROJECT_NAME} ${CMAKE_CURRENT_LIST_DIR}/src/main.cpp)

    target_include_directories(${PROJECT_NAME} PRIVATE ${HIPACC_PATH}/include/dsl ${HIPACC_SAMPLES_DIR}/common)

    if(NOT ${ARG_HIDE})
        add_test(NAME ${PROJECT_NAME}
                COMMAND $<TARGET_FILE:${PROJECT_NAME}>
                WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR})
    endif()
    
    set_target_properties (${PROJECT_NAME} PROPERTIES FOLDER ${SAMPLE_CATEGORY})
                   
    if(HIPACC_SAMPLE_USE_OPENCV)
        target_compile_options(${PROJECT_NAME} PRIVATE -DUSE_OPENCV
                                                       -DIMAGE_BASE_PATH="${HIPACC_SAMPLES_DIR}/common/img/")
        target_link_directories(${PROJECT_NAME} PRIVATE ${OpenCV_INCLUDE_DIRS})
        target_link_libraries(${PROJECT_NAME} PRIVATE ${OpenCV_LIBS})
    endif()

endmacro()

macro(add_hipacc_sample_cpu)

    set(options HIDE)
    set(oneValueArgs)
    set(multiValueArgs)

    cmake_parse_arguments(ARG
                        "${options}"
                        "${oneValueArgs}"
                        "${multiValueArgs}"
                        ${ARGN})

    get_filename_component(SAMPLE_NAME "${CMAKE_CURRENT_LIST_DIR}" NAME)

    project(${SAMPLE_NAME}_Cpu)
   
    if(${ARG_HIDE})
        set(_MSG_ADDITION "(hidden)")
    else()
        unset(_MSG_ADDITION)
    endif()

    message(STATUS "Add sample ${SAMPLE_CATEGORY}/${PROJECT_NAME} ${_MSG_ADDITION}")

    add_executable(${PROJECT_NAME})

    file(STRINGS "${HIPACC_SAMPLES_DIR}/common/config/cpu.conf" _CONFIG_FILE NEWLINE_CONSUME)
    string(REPLACE "\n" ";" _CONFIG_FILE ${_CONFIG_FILE})

    add_hipacc_sources(TARGET ${PROJECT_NAME} PRIVATE
                       TARGET_ARCH CPU 
                       SOURCES ${CMAKE_CURRENT_LIST_DIR}/src/main.cpp
                       INCLUDE_DIRS ${HIPACC_SAMPLES_DIR}/common
                       OPTIONS "${_CONFIG_FILE}")

    if(NOT ${ARG_HIDE})
        add_test(NAME ${PROJECT_NAME}
                COMMAND $<TARGET_FILE:${PROJECT_NAME}>
                WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR})
    endif()
    
    set_target_properties (${PROJECT_NAME} PROPERTIES FOLDER ${SAMPLE_CATEGORY})
                   
    if(HIPACC_SAMPLE_USE_OPENCV)
        target_compile_options(${PROJECT_NAME} PRIVATE -DUSE_OPENCV
                                                       -DIMAGE_BASE_PATH="${HIPACC_SAMPLES_DIR}/common/img/")
        target_link_directories(${PROJECT_NAME} PRIVATE ${OpenCV_INCLUDE_DIRS})
        target_link_libraries(${PROJECT_NAME} PRIVATE ${OpenCV_LIBS})
    endif()

    if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
      target_compile_options(${PROJECT_NAME} PRIVATE /openmp)
    elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
      target_compile_options(${PROJECT_NAME} PRIVATE -fopenmp)
      target_link_libraries(${PROJECT_NAME} PRIVATE gomp)
    elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
      target_compile_options(${PROJECT_NAME} PRIVATE -fopenmp)
    endif ()

endmacro()

macro(add_hipacc_sample_cuda)

    set(options HIDE)
    set(oneValueArgs)
    set(multiValueArgs)

    cmake_parse_arguments(ARG_CUDA
                        "${options}"
                        "${oneValueArgs}"
                        "${multiValueArgs}"
                        ${ARGN})

    check_language(CUDA)

    if(CMAKE_CUDA_COMPILER)

        get_filename_component(SAMPLE_NAME "${CMAKE_CURRENT_LIST_DIR}" NAME)

        project(${SAMPLE_NAME}_Cuda LANGUAGES CXX CUDA)

        if(${ARG_CUDA_HIDE})
            set(_MSG_ADDITION "(hidden)")
        else()
            unset(_MSG_ADDITION)
        endif()

        message(STATUS "Add sample ${SAMPLE_CATEGORY}/${PROJECT_NAME} ${_MSG_ADDITION}")
           
        add_executable(${PROJECT_NAME})
                            
        file(STRINGS "${HIPACC_SAMPLES_DIR}/common/config/cuda.conf" _CONFIG_FILE NEWLINE_CONSUME)
        string(REPLACE "\n" ";" _CONFIG_FILE ${_CONFIG_FILE})
    
        add_hipacc_sources(TARGET ${PROJECT_NAME} PRIVATE
                           TARGET_ARCH CUDA 
                           SOURCES ${CMAKE_CURRENT_LIST_DIR}/src/main.cpp
                           INCLUDE_DIRS ${HIPACC_SAMPLES_DIR}/common
                           OPTIONS "${_CONFIG_FILE}")

        if(NOT ${ARG_CUDA_HIDE})
            add_test(NAME ${PROJECT_NAME}
                    COMMAND $<TARGET_FILE:${PROJECT_NAME}>                       
                    WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR})
        endif()

        set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER ${SAMPLE_CATEGORY})
                              
        target_compile_features(${PROJECT_NAME} PUBLIC cxx_std_11)   
                                            
        if(HIPACC_SAMPLE_USE_OPENCV)
            target_compile_options(${PROJECT_NAME} PRIVATE -DUSE_OPENCV
                                                           -DIMAGE_BASE_PATH="${HIPACC_SAMPLES_DIR}/common/img/")
            target_link_directories(${PROJECT_NAME} PRIVATE ${OpenCV_INCLUDE_DIRS})
            target_link_libraries(${PROJECT_NAME} PRIVATE ${OpenCV_LIBS})
        endif()
        
    else()
        message(STATUS "Skip sample ${SAMPLE_CATEGORY}/${PROJECT_NAME} (CUDA missing)")
    endif()
    
endmacro()

macro(add_hipacc_sample_opencl)

    if(NOT WIN32)
        message(STATUS "Skip sample ${SAMPLE_CATEGORY}/${PROJECT_NAME} (OpenCL disabled on Linux)")
        return()
    endif()

    set(options HIDE CPU GPU ACC)
    set(oneValueArgs)
    set(multiValueArgs)

    cmake_parse_arguments(ARG_OPENCL
                        "${options}"
                        "${oneValueArgs}"
                        "${multiValueArgs}"
                        ${ARGN})

    if(OpenCL_FOUND)

        get_filename_component(SAMPLE_NAME "${CMAKE_CURRENT_LIST_DIR}" NAME)

        set(_OPENCL_TARGET_DEVICES)

        if(ARG_OPENCL_CPU)
            list(APPEND _OPENCL_TARGET_DEVICES CPU)
        endif()

        if(ARG_OPENCL_GPU)
            list(APPEND _OPENCL_TARGET_DEVICES GPU)
        endif()

        if(ARG_OPENCL_ACC)
            list(APPEND _OPENCL_TARGET_DEVICES ACC)
        endif()

        foreach(_TARGET_DEVICE IN LISTS _OPENCL_TARGET_DEVICES)
            project(${SAMPLE_NAME}_OpenCL_${_TARGET_DEVICE} LANGUAGES CXX)

            if(${ARG_OPENCL_HIDE})
                set(_MSG_ADDITION "(hidden)")
            else()
                unset(_MSG_ADDITION)
            endif()

            message(STATUS "Add sample ${SAMPLE_CATEGORY}/${PROJECT_NAME} ${_MSG_ADDITION}")
            
            add_executable(${PROJECT_NAME})

            string(TOLOWER ${_TARGET_DEVICE} _TARGET_DEVICE_LOW)
            file(STRINGS "${HIPACC_SAMPLES_DIR}/common/config/opencl-${_TARGET_DEVICE_LOW}.conf" _CONFIG_FILE NEWLINE_CONSUME)
            string(REPLACE "\n" ";" _CONFIG_FILE ${_CONFIG_FILE})
        
            add_hipacc_sources(TARGET ${PROJECT_NAME} PRIVATE
                               TARGET_ARCH OPENCL-${_TARGET_DEVICE}
                               SOURCES ${CMAKE_CURRENT_LIST_DIR}/src/main.cpp
                               INCLUDE_DIRS ${HIPACC_SAMPLES_DIR}/common
                               OPTIONS "${_CONFIG_FILE}"
                               OUTPUT_DIR_VAR _HIPACC_OUTPUT_DIR)
    
            if(NOT ${ARG_OPENCL_HIDE})
                add_test(NAME ${PROJECT_NAME}
                        COMMAND $<TARGET_FILE:${PROJECT_NAME}>
                        WORKING_DIRECTORY ${_HIPACC_OUTPUT_DIR})
            endif()

            set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER ${SAMPLE_CATEGORY})
            target_compile_features(${PROJECT_NAME} PUBLIC cxx_std_11)   
                                            
            if(HIPACC_SAMPLE_USE_OPENCV)
                target_compile_options(${PROJECT_NAME} PRIVATE -DUSE_OPENCV
                                                               -DIMAGE_BASE_PATH="${HIPACC_SAMPLES_DIR}/common/img/")
                target_link_directories(${PROJECT_NAME} PRIVATE ${OpenCV_INCLUDE_DIRS})
                target_link_libraries(${PROJECT_NAME} PRIVATE ${OpenCV_LIBS})
            endif()

        endforeach()
        
    else()
        message(STATUS "Skip sample ${SAMPLE_CATEGORY}/${PROJECT_NAME} (OpenCL missing)")
    endif()
    
endmacro()

macro(add_all_subdirectories)
    file(GLOB _SUB_DIRS RELATIVE "${CMAKE_CURRENT_LIST_DIR}" "${CMAKE_CURRENT_LIST_DIR}/*")
    foreach(_SUB_DIR ${_SUB_DIRS})
        if(IS_DIRECTORY "${CMAKE_CURRENT_LIST_DIR}/${_SUB_DIR}" AND EXISTS "${CMAKE_CURRENT_LIST_DIR}/${_SUB_DIR}/CMakeLists.txt")
            add_subdirectory(${_SUB_DIR})
        endif()
    endforeach()
endmacro()

add_all_subdirectories()
